# Getting started with data analysis

# Background to this example

Data comes in all sorts and forms within Earth sciences, from long term paleo records describing Oxygen levels in the atmosphere, timeseries of river discharge and spatio-temporal satellite images monitoring the vegetation. Within Earth Sciences we work with all these types of data to understand the past, present and future of the Earth system. Before we can work with these types of data we need to understand what we can and cannot do with the data, which conclusion we can and cannot draw.

**In this practical we will start looking at different types of data and distributions of these data to get a better understanding of the different types of data and their distributions.**

Let's start with using Python again by opening your Conda environment and then opening Spyder (for detailed instructions please look back at the first practical). We start by loading some of the stand libraries in this course. We use:

-   Pandas (data management and data handling)

-   Numpy (statistical analysis and data handling)

-   Matplotlib (plotting)

-   Scipy (statistical analysis)

## Code

``` python
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as stats
```

Now we are going to take a look at the first dataset which contains information about the daily temperatures in the Netherlands. We tell pandas to parse the date information, and use it as row labels:

``` python
Tas = pd.read_csv("../Data/dailyTemperature.csv", parse_dates=True, index_col=0)
Pr = pd.read_csv("../Data/dailyPrecipitation.csv", parse_dates=True, index_col=0)
E = pd.read_csv("../Data/dailyEvaporation.csv", parse_dates=True, index_col=0)
```

``` python
meteoData = Tas.join(Pr).join(E)
```

``` python
meteoData.describe()
```

``` python
meteoData.plot()
```

This will not help you much

``` python
meteoData[["Tas","Evap"]].plot(xlim=["2023","2024"], ylim=[-2,25])
```

``` python
meteoData["Precip"].plot(kind="hist")
```

``` python
meteoData["Precip"].plot(kind="density")
```

``` python
meteoData[["Precip", "Evap"]].plot(kind="hist",alpha=0.5, bins=100, xlim=[0,30])
```

``` python
meteoData.plot(kind="scatter",x="Tas", y="Evap")
meteoData.plot(kind="scatter",x="Tas", y="Evap", alpha=0.05)
```

``` python
annualData = meteoData[["Precip", "Evap"]].resample("YE").sum()
```

``` python
annualData.plot(kind="scatter",x="Precip", y="Evap")
```

What do you notice?

``` python
annualData.describe()
```

``` python
meteoData.dropna()
```
No data prior to 1957 and the data of 1957 is incomplete, so we drop all years up to 1957. But we do have to remember that the last year is also not complete so we also drop that.

``` python
annualData = meteoData[["Precip", "Evap"]].dropna().resample("YE").sum().loc["1958":"2023"]
annualData.index = annualData.index.strftime('%Y')
```
Attempt number 2

``` python
annualData.plot(kind="scatter",x="Precip", y="Evap")
```

``` python
annualData.plot()
```

``` python
annualData.plot(kind="hist", alpha=0.5, bins=20, color=["blue", "red"])
```

``` python
annualData["EvapDef"] = annualData["Evap"] * -1.
```

``` python
annualData[["Precip", "EvapDef"]].plot(kind="bar", color=["blue", "red"], stacked=True)
```

``` python
annualData["PrecipDef"] = annualData["Precip"] - annualData["Evap"]
```

``` python
annualData["PrecipDef"].plot()
```

``` python
annualData["PrecipDef"].plot(kind="hist")
```

