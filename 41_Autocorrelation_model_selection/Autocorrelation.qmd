---
title: "Seasonality and autocorrelation"
format: gfm
---

In Geoscience we often measure a variable though time. Just like in regression

We will follow the textbook's chapter 11.7 and use data on the trends in atmospheric carbon dioxide from the National Oceanic and Atmospheric Administration (NOAA, Fig.Â 11.9). In 1958, C.D. Keeling started monitoring $CO_2$ levels in the Mauna Loa Observatory on Hawaii. It was the first continuous monitoring programme and provided evidence for the rise of $CO_2$ concentration in the atmosphere. You can find more about it on the [curve's official website](https://keelingcurve.ucsd.edu/).

Exercise based on [T. Haslwanter's textbook materials](https://github.com/thomas-haslwanter/statsintro-python-2e/blob/master/ipynbs/11_timeSeries.ipynb).

# Code

```{python}
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import acf, pacf
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima.model import ARIMA
import statsmodels.formula.api as sm
import ssl
```

The original dataset is provided in a format that is not easy for automatic machine reading (e.g. the column headers occupy different number of lines). So to read it in, you would need to make it machine-friendly, e.g. one row = one observation. We provide this cleaned dataset for you.

Read in the dataset:
```{python}
path = '../Data/monthly_in_situ_co2_mlo.csv'
df = pd.read_csv(path, sep=',')
```

Preview the dataset:
```{python}
df.head()
```

If we wanted to plot the values in time, we could currently do it either by month number, or by the year, but not both. You need to create an extra variable that will represent the time in a continuous manner. 

<details>
  <summary>Solution</summary>
```{python}
df['time'] = df['Year'].map(str) + '.' + df['Month'].map(str)
```

Visualize it:
```{python}
df.plot('time', 'CO2')
```

Here we use the function `seasonal_decompose` from `statsmodels` to separate the linear trend from the seasonal component. The measurements are taken every month so the period of seasonality is 12. We use the additive model because the amplitude of the seasonal component does not change with the level of the time series - see eq. 11.13 in the textbook. 

## Decomposition into trend, seasonality, and residuals

```{python}
result_add = seasonal_decompose(df['CO2'], 
model='additive', 
period=12, 
extrapolate_trend='freq')
```

What does the last line, `extrapolate_trend='freq'`, do? Use the [statsmodels documentation](https://www.statsmodels.org/dev/generated/statsmodels.tsa.seasonal.seasonal_decompose.html) to understand all the parameters.

Now we can plot the additive components:
```{python}
result_add.plot()
plt.show()
```

### Zooming in on the trend

In some applications, we might want to only understand one component of the time series. In the case of the $CO_2$ data, the secular trend is of wide interest and we might want to know how fast it is increasing.

Now we have to account for the fact that $CO_2$ levels in each year depend on the value in the previous year. This is exactly why we cannot apply regression analysis to the entire $CO_2$ variable. But we can use the *i - 1* value to predict the *i*th value. 

We use the 'shift' function to create a new variable that is the the *i - 1*  value of the trend.

```{python}
trend = pd.DataFrame(result_add.trend)
trend['time'] = df['time']
trend['predicted'] = trend['trend'].shift(1)
```

Now we can use ordinary least squares regression to fit a model that predicts the current trend value based on the previous one:

```{python}
model_fit = sm.ols('predicted~trend', data=trend).fit()
print(model_fit.summary2())
```

### Task 1

Extracts the coefficients of the model and make a plot using them. This plot represents your model fit. Overlie on it the trend values we calculated using decomposition, as well as the original time series. How good is your fit?

## Seasonality

Why is the $CO_2$ level so variable during the year? And how regular is this variability? We might want to characterise it.

### Task 2
Can you plot the seasonal component over a period of 12 months? You would need a horizontal axis with months and repeat the plotting over that interval for each year. 
Add an average of the seasonal component over all years to the plot.  

When in the year is the $CO_2$ level the highest? And when is it the lowest? If you look at the residues around the mean, is there a lot of variation?

## Residuals
The first three plots are easy to interpret but what is the last one, residuals? These are the deviations from the trend and seasonality. So these are "anomalies" which cannot be explained by the seasonality or the continuous trend.
We might be interested in this for example to see if there are any "extreme events" in the $CO_2$ levels, or is the overall variability of the $CO_2$ levels increasing over time. This would tell us if a linear trend is a good model for this dataset.

```{python}
%matplotlib inline

plt.plot(result_add.resid, '-')
```

We can check if there is any autocorrelation in the residuals.
```{python}
plot_acf(result_add.resid)
plt.show()
```
Following the textbook, we find that:

> The systematic patterns in the autocorrelation function show
> that some seasonal components are not constant and have been
> missed. The blue  shaded area indicates the 95%-confidence
> interval for the autocorrelation coefficients.

### Task 3
What does it mean if there is autocorrelation in the residuals? How can you interpret the plot above? Write a sentence that you would use to explain the trends in atmospheric $CO_2$ levels over time to a non-specialist.

```{python}
#| include: false
plot_pacf(result_add.resid)
plt.show()
```

## Fit an ARIMA model
```{python}
model = ARIMA(result_add.trend, order=(1,0,1))
model_fit = model.fit()
print(model_fit.summary())
```

```{python}
model = ARIMA(result_add.resid, order=(0,0,2))
model_fit = model.fit()
print(model_fit.summary())
```
